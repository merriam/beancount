#!/usr/bin/env python
"""
Given a series of Ledger files, figure out the sum of assets held by these
ledgers at balance, and fetch and display the market value and movement for the
current period.
"""

# stdlib imports
import re, md5, urllib
import cPickle as pickle
from os.path import *
from decimal import Decimal

# other imports
from BeautifulSoup import BeautifulSoup

# beancount imports
from beancount import cmdline
from beancount.utils import render_tree
from beancount.ledger import compute_balsheet
from beancount.wallet import Wallet
from beancount.web.market import getquote



class FileValueCache(object):
    "A cache for a value derived from a file."

    COMPUTE = None


    def __init__(self, cachefn):
        self.cachefn = '/tmp/bean-assets.cache'
        self.load()

        # Saved computed values for files checked.
        self.saved = {}

    def load(self):
        try:
            self.cache = pickle.load(open(self.cachefn))
        except (IOError, EOFError):
            self.cache = {}
        self.cache_orig = self.cache.copy()

    def save(self):
        if self.cache != self.cache_orig:
            pickle.dump(self.cache, open(self.cachefn, 'w'))

    def get(self, fn):

        try:
            timestamp, size, crc, value = self.cache[fn]
            ctimestamp = getmtime(fn)
            csize = getsize(fn)
            compute = (ctimestamp > timestamp or
                       csize != size)
            if not compute:
                m = md5.new()
                m.update(open(fn).read())
                ccrc = m.hexdigest()
                compute = ccrc != crc
            else:
                ccrc = None

            self.saved[fn] = (ctimestamp, csize, ccrc)
        except KeyError:
            compute = 1

        if compute:
            raise KeyError("Value needs to be recomputed.")
        else:
            return value

    def update(self, fn, value):
        try:
            timestamp, size, crc = self.saved[fn]
        except KeyError:
            timestamp, size, crc = None, None, None

        if timestamp is None:
            timestamp = getmtime(fn)
        if size is None:
            size = getsize(fn)
        if crc is None:
            m = md5.new()
            m.update(open(fn).read())
            crc = m.hexdigest()

        self.cache[fn] = (timestamp, size, crc, value)









class Position(object):

    def __init__(self, comm, units, pcomm):

        # Position's commodity and number of units in that commodity.
        self.comm = comm
        self.units = units

        # The quote commodity.
        self.pcomm = pcomm

        # Price, change, etc.
        self.price = None
        self.change = None

    def __cmp__(self, other):
        return cmp(self.comm, other.comm)



currencies = ['USD', 'CAD', 'JPY', 'EUR', 'AUD', 'CHF', 'BRL']

def main():
    import optparse
    parser = optparse.OptionParser(__doc__.strip())

    fvcache = FileValueCache('/tmp/bean-assets.cache')

    totassets = Wallet()
    totpricedmap = {}
    cmdline.addopts(parser)
    opts, _, args = cmdline.main(parser, no=0)
    for fn in args:
        try:
            balance, pricedmap = fvcache.get(fn)
        except KeyError:
            # Compute the balance.
            ledger = cmdline.load_ledger(fn, opts)
            compute_balsheet(ledger, 'local_balance', 'balance')
            acc = ledger.get_account('Assets')
            balance = acc.balance
            pricedmap = ledger.pricedmap
            fvcache.update(fn, (balance, pricedmap))
        totassets += balance
        totpricedmap.update(pricedmap)
    fvcache.save()
    
    positions = {}
    for comm, units in totassets.iteritems():
        pcomm_set = totpricedmap.get(comm, set())
        if pcomm_set:
            pcomm = pcomm_set.pop()
        else:
            pcomm = None
        pos = Position(comm, units, pcomm)
        positions[comm] = pos

    for pos in sorted(positions.itervalues()):
        if pos.comm in currencies:
            pass
        else:
            price, change = getquote(pos.comm, pos.pcomm)
            if price is not None:
                pos.price = price
                pos.change = change

    for pos in sorted(positions.itervalues()):
        print pos.comm, pos.units, pos.pcomm, pos.price, pos.change
    print



if __name__ == '__main__':
    main()

