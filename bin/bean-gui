#!/usr/bin/env python
#------------------------------------------------------------------------------

from beancount.ledger import Ledger
from beancount.utils import itertree
from PyQt4.QtCore import *
from PyQt4.QtGui import *
import logging, codecs, signal, os

#------------------------------------------------------------------------------

class LayoutWidget(QWidget):
    def __init__(self, widgets, vertical=True):
        QWidget.__init__(self)
        layout = QVBoxLayout() if vertical else QHBoxLayout()
        for w in widgets:
            layout.addWidget(w)
        self.setLayout(layout)

#------------------------------------------------------------------------------

class Application(QApplication):
    def __init__(self, *args):
        QApplication.__init__(self, *args)

        # FIXME: This should be an abstract model that talks
        #        directly to the ledger.
        self.accmodel = QStandardItemModel()

        self.ledger = Ledger()
        self.readLedger('../examples/demo.ledger')

        # Account list filter
        self.accfilter = QSortFilterProxyModel()
        self.accfilter.setSourceModel(self.accmodel)
        self.accfilter.setFilterCaseSensitivity(Qt.CaseInsensitive)

        # Selected account model
        self.selaccmodel = QStandardItemModel()

        # Selected account filter
        self.selaccfilter = QSortFilterProxyModel()
        self.selaccfilter.setSourceModel(self.selaccmodel)
        self.selaccfilter.setFilterKeyColumn(-1)
        self.selaccfilter.setFilterCaseSensitivity(Qt.CaseInsensitive)

        # Account list view.
        self.accview = QListView()
        self.accview.selectionChanged = self.onAccSelectionChanged
        self.accview.setModel(self.accfilter)

        # Selected account view.
        self.selaccview = QTableView()
        self.selaccview.horizontalHeader().setStretchLastSection(True)
        self.selaccview.setSelectionMode(QAbstractItemView.SingleSelection)
        self.selaccview.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.selaccview.setSortingEnabled(True)
        self.selaccview.setModel(self.selaccfilter)

        # Inputs fields for regexs
        regex_list = QLineEdit()
        regex_edit = QLineEdit()
        QObject.connect(regex_edit, SIGNAL('textChanged(const QString&)'), self.accfilter.setFilterRegExp)
        QObject.connect(regex_list, SIGNAL('textChanged(const QString&)'), self.selaccfilter.setFilterRegExp)

        # Layout everything nicely
        self.ui = QSplitter()
        self.ui.addWidget(LayoutWidget((regex_list, self.accview)))
        self.ui.addWidget(LayoutWidget((regex_edit, self.selaccview)))
        self.ui.setStretchFactor(0,1)
        self.ui.setStretchFactor(1,2)
        self.ui.show()

        # Setup shortcuts.
        self.bindShortcut('Ctrl+Q', self.quit)
        self.bindShortcut('Ctrl+R', self.refresh)
        self.bindShortcut('Ctrl+O', self.onFileOpen)
        signal.signal(signal.SIGINT, signal.SIG_DFL)

    def onAccSelectionChanged(self, selected, deselected):
        indexes = selected.indexes()
        indexes = map(lambda x:self.accfilter.mapToSource(x), indexes)
        items = map(lambda x:self.accmodel.itemFromIndex(x), indexes)
        items = map(lambda x:str(x.text()), items)

        self.selaccmodel.clear()

        for _, _, account in iter(itertree(self.ledger.get_account(items[0]))):
            for p in account.postings:
                self.selaccmodel.appendRow([QStandardItem(str(p.get_date())),
                                            QStandardItem(str(p.account_name)),
                                            QStandardItem(str(p.txn.narration)),
                                            QStandardItem(str(p.amount))])
    def onFileOpen(self):
        filename = QFileDialog.getOpenFileName(self.ui, "Open Ledger...")
        if filename:
            self.readLedger(str(filename))

    def readLedger(self, fn):
        f = open(fn)
        Reader = codecs.getreader('ascii')
        f = Reader(f)
        self.ledger = Ledger()
        self.ledger.parse_file(f, fn, 'ascii')
        self.refresh()

    def bindShortcut(self, seq, target):
        QObject.connect(QShortcut(QKeySequence(seq), self.ui),
                        SIGNAL('activated()'), target)
        
    def refresh(self):
        self.accmodel.clear()
        for _, _, x in iter(itertree(self.ledger.get_root_account())):
            self.accmodel.appendRow([QStandardItem(x.fullname)])

#------------------------------------------------------------------------------
        
if __name__ == '__main__':
    app = Application([])
    app.exec_()

