from beancount.ledger import Ledger
from beancount.utils import itertree
import codecs

ledger = Ledger()
fn = '/Users/ccaron/ccaron.ledger'

f = open(fn)
Reader = codecs.getreader('ascii')
f = Reader(f)
ledger.parse_file(f, fn, 'ascii')


from PyQt4.QtCore import *
from PyQt4.QtGui import *

app = QApplication([])

model = QStandardItemModel()
for _, _, x in iter(itertree(ledger.get_root_account())):
    model.appendRow([QStandardItem(x.fullname)])

proxymodel = QSortFilterProxyModel()
proxymodel.setSourceModel(model)
proxymodel.setFilterCaseSensitivity(Qt.CaseInsensitive)

detailmodel = QStandardItemModel()
detailfilter = QSortFilterProxyModel()
detailfilter.setSourceModel(detailmodel)
detailfilter.setFilterKeyColumn(-1)
detailfilter.setFilterCaseSensitivity(Qt.CaseInsensitive)

def selectionChanged(selected, deselected):
    indexes = selected.indexes()
    indexes = map(lambda x:proxymodel.mapToSource(x), indexes)
    items = map(lambda x:model.itemFromIndex(x), indexes)
    items = map(lambda x:str(x.text()), items)

    detailmodel.clear()

    for _, _, account in iter(itertree(ledger.get_account(items[0]))):
        for p in account.postings:
            detailmodel.appendRow([QStandardItem(str(p.get_date())),
                                   QStandardItem(str(p.account_name)),
                                   QStandardItem(str(p.txn.narration)),
                                   QStandardItem(str(p.amount))])

treeview = QListView()
treeview.selectionChanged = selectionChanged
treeview.setModel(proxymodel)
QObject.connect(treeview, SIGNAL('selectionChanged(const QItemSelection&, const QItemSelection&)'), selectionChanged)


listview = QTableView()
listview.horizontalHeader().setStretchLastSection(True)
listview.setSelectionMode(QAbstractItemView.SingleSelection)
listview.setSelectionBehavior(QAbstractItemView.SelectRows)
listview.setSortingEnabled(True)
listview.setModel(detailfilter)

regex_list = QLineEdit()
regex_edit = QLineEdit()
QObject.connect(regex_edit, SIGNAL('textChanged(const QString&)'), proxymodel.setFilterRegExp)
QObject.connect(regex_list, SIGNAL('textChanged(const QString&)'), detailfilter.setFilterRegExp)
widget = QWidget()

layout1 = QVBoxLayout()
layout1.addWidget(regex_edit)
layout1.addWidget(treeview)

layout2 = QVBoxLayout()
layout2.addWidget(regex_list)
layout2.addWidget(listview)

layout = QSplitter()
w1 = QWidget()
w1.setLayout(layout1)
layout.addWidget(w1)
w2 = QWidget()
w2.setLayout(layout2)
layout.addWidget(w2)
layout.setStretchFactor(0,1)
layout.setStretchFactor(1,2)
layout.show()

app.exec_()

