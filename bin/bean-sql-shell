#!/usr/bin/env python
"""
Virtual shell for bean-count accounts hierarchy.
"""

# stdlib imports
import sys, os, cmd, optparse, traceback, logging
from operator import itemgetter
from itertools import izip, imap
from os.path import *

# misc imports
import psycopg2 as dbapi

# local imports
from fscmd import HierarchicalCmd



class BeanShell(HierarchicalCmd):
    "A bean-counter database manipulation tool."

    fmt_short = '%(name)s'
    fmt_long = '%(id)05s  %(sec)-16s %(isdebit)2s  %(name)s'

    def __init__(self, conn, *args):
        # Connection to the database.
        self.conn = conn
        self.curs = conn.cursor()

        HierarchicalCmd.__init__(self, *args)

    def stat(self, node):
        assert isinstance(node, int)
        self.curs.execute("""
          select * from account where id = %s
        """, (node,))
        if self.curs.rowcount == 1:
            m = dict(izip(imap(itemgetter(0), self.curs.description),
                          self.curs.next()))
            self.prepare_stat(m)
        else:
            m = None
        return m

    def stat_short(self, node):
        assert isinstance(node, int)
        self.curs.execute("""
          select name, parent_id from account where id = %s
        """, (node,))
        if self.curs.rowcount == 1:
            name, parent = self.curs.next()
        else:
            name, parent = None, None
        return name, parent

    def get_root_node(self):
        # Get the root node.
        self.curs.execute("""
          select id from account where parent_id is null order by id
        """)
        if self.curs.rowcount == 0:
            # The root node should always be available.
            raise dbapi.DatabaseError("Non-existent root node.")
        elif self.curs.rowcount > 1:
            logging.warning("Warning: found accounts without parents.")
        return self.curs.next()[0]

    def get_node_parent(self, node):
        "Return the parent of the given node."
        assert node is not None
        self.curs.execute("""
          select parent_id from account where id = %s
        """, (node,))
        if self.curs.rowcount == 0:
            # The root node should always be available.
            raise dbapi.DatabaseError("Non-existent node: %s." % node)
        assert self.curs.rowcount == 1
        return self.curs.next()[0]

    def get_child_node(self, parent, name):
        self.curs.execute("""
          select id from account where parent_id = %s and name = %s
          """, (parent, name))
        if self.curs.rowcount == 0:
            child = None
        else:
            child = self.curs.next()[0]
        return child

    def listdir(self, node):
        self.curs.execute("select id from account where parent_id = %s",
                          (node,))
        return map(itemgetter(0), self.curs)

    def create(self, parent, name, *args):

        # Figure out which security to use.
        if not args:
            self.curs.execute("""
              select sec from account where id = %s
              """, (parent,))
            sec = self.curs.next()[0]
            self.stdout.write(
                "Note: using security from parent: '%s'.\n" % sec)
        else:
            sec = args[0].upper()

        # Create the node. Note: there is already a constraint about the
        # uniqueness of subaccounts per directory.
        try:
            self.curs.execute("""
              insert into account (name, parent_id, sec) values (%s, %s, %s)
              """, (name, parent, sec))
        except Exception, e:
            self.perr(str(e))
            self.conn.rollback()
        else:
            self.conn.commit()

    def remove(self, node):
        try:
            self.curs.execute("""
              delete from account where id = %s
              """, (node,))
        except dbapi.Error:
            self.perr("Could not remove node %s. Maybe it is not empty?" % node)
            self.conn.rollback()
        else:
            self.conn.commit()

    def remove_node_contents(self, node):
        trace('FIXME: todo -- remove_node_contents')
        pass

    def set_parent(self, node, parent):
        try:
            self.curs.execute("""
              update account set parent_id = %s where id = %s
              """, (parent, node))
        except Exception, e:
            self.perr(str(e))
            self.conn.rollback()
        else:
            self.conn.commit()

    def set_name(self, node, name):
        try:
            self.curs.execute("""
              update account set name = %s where id = %s
              """, (name, node))
        except Exception, e:
            self.perr(str(e))
            self.conn.rollback()
        else:
            self.conn.commit()

    def prepare_stat(self, m):
        "Prepare the raw stat data for printing."
        parent_id = m['parent_id']
        m['parent_id'] = parent_id if parent_id is not None else ''
        m['isdebit'] = 'De' if m['isdebit'] else 'Cr'


def splitargs(args):
    "Split the cmdline into discrete elements."
    return args.split() if args else None



## FIXME: deal with spaces (add quoting capability).
## FIXME: deal with globbing patterns.

def expand(fn, cwdpath):
    """
    Expand the dots and dot-dots in filename 'fn'. All returned filenames are
    absolute.
    """
    assert isabs(cwdpath)

    if not isabs(fn):
        fn = join(cwdpath, fn)
    assert isabs(fn)

    comps = fn.split(os.sep)
    assert comps[0] == ''
    comps = comps[1:]

    newcomps = []
    for c in comps:
        if c == '.':
            continue
        elif c == '..':
            if not newcomps:
                return os.sep
            newcomps.pop()
        else:
            newcomps.append(c)

    return os.sep + os.sep.join(newcomps)




def main():
    parser = optparse.OptionParser(__doc__.strip())
    parser.add_option('-d', '--database', action='store_true',
                      default='beancount.db',
                      help="Database name.")
    opts, args = parser.parse_args()

    conn = dbapi.connect(database=opts.database,
                         host='localhost',
                         password='pg',
                         user=os.environ.get('USER', None))
    sh = BeanShell(conn)
    try:
        sh.cmdloop()
    except KeyboardInterrupt:
        print '\nInterrupted.'

if __name__ == '__main__':
    main()



