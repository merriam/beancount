#!/usr/bin/env python
"""
Read an OFX file and output its entries as Ledger syntax.

This program also reads a mapping from account id to account name, from the
ledger file itself, which should include lines of this form::

   @var ofx 000067632326            Assets:Current:RBC:Checking
   @var ofx 000023245336            Assets:Current:RBC:US-Checking
   @var ofx 000018783275            Assets:Current:RBC:Savings
   @var ofx 3233762676464639        Liabilities:Credit-Card:RBC-VISA

(Note that this is not part of the normal Ledger format, which is why the
directives are in comments.)
"""

# stdlib imports
import os, re
from datetime import datetime
from decimal import Decimal

# other imports
from BeautifulSoup import BeautifulStoneSoup



class Account(object):
    "An OFX account object."

    accname = None
    currency = None
    transactions = None
    start, end = None, None
    bal_amount = None
    bal_time = None

    def __init__(self):
        self.transactions = []

class Transaction(object):
    "An OFX transaction object."

    trntype = None
    dtposted = None
    trnamt = None
    fitid = None
    name = None
    memo = None
    checknum = None

    def initialize(self):
        if self.dtposted:
            self.date = ofx_parse_time(self.dtposted).date()
        self.description = ' -- '.join(filter(None, [self.name, self.memo]))
        self.amount = Decimal(self.trnamt)

    def __str__(self):
        date_s = self.date.strftime('%Y-%m-%d')
        if self.checknum:
            return '%s ! (%s) %s' % (date_s, self.checknum,
                                     self.description)
        else:
            return '%s ! %s' % (date_s, self.description)


def process_ofx(fn, accounts_map):
    "Read an OFX file and process it. Return a list of account objects."
    all = []
    soup = BeautifulStoneSoup(open(fn))
    for st in soup.findAll(['stmttrnrs', 'ccstmttrnrs']):
        acc = Account()

        accid, acc.currency = find_account(st)
        try:
            acc.accname = accounts_map[accid]
        except KeyError:
            raise KeyError("Missing account name in map for %s" % accid)

        # Find transactions list.
        tranlist = st.find('banktranlist')

        # Find start and end times.
        acc.start = ofx_parse_time(tranlist.dtstart.contents[0])
        acc.end = ofx_parse_time(tranlist.dtend.contents[0])

        # Process transactions themselves.
        for trn in tranlist.findAll('stmttrn'):
            t = Transaction()
            acc.transactions.append(t)
            for a in 'trntype dtposted trnamt fitid name memo checknum'.split():
                n = trn.find(a)
                if n:
                    setattr(t, a, n.contents[0].strip())
            t.initialize()

        # Find expected balance.
        acc.bal_amount = Decimal(st.ledgerbal.balamt.contents[0].strip())
        acc.bal_time = ofx_parse_time(st.ledgerbal.dtasof.contents[0].strip())

        all.append(acc)

    return all

def ofx_parse_time(s):
    "Parse an OFX time string and return a datetime object.."
    if len(s) < 14:
        return datetime.strptime(s[:8], '%Y%m%d')
    else:
        return datetime.strptime(s[:14], '%Y%m%d%H%M%S')

def find_account(st):
    "Get and return the account information and currency."
    s = st.find(['stmtrs', 'ccstmtrs'])
    assert s is not None
    acct = s.find(['bankacctfrom', 'ccacctfrom'])
    # Note: RBC offers a malformed XML.
    acctid = acct.acctid.contents[0].strip()
    currency = s.curdef.contents[0].strip()
    return acctid, currency

def read_accounts_map(fn):
    "Extract the account number mappings from a ledger file."
    accmap = {}
    for line in open(fn):
        mo = re.match('^\s*@accid[ \t]+(.*)[ \t]+(.*)$', line)
        if not mo:
            continue
        x = [x.strip() for x in mo.group(1, 2)]
        if len(x) != 2:
            raise SystemExit("Error reading map file: %s" % line)
        accid, name = x
        accmap[accid] = name
    return accmap

def main():
    import optparse
    parser = optparse.OptionParser(__doc__.strip())
    opts, ledger, args = cmdline.main(parser)

    if args < 2:
        parser.error("You must provide a ledger file with account mappings "
                     "and a list of OFX files to convert.")
    ledger_fn = args[0]
    ofx_files = args[1:]

    accounts_map = read_accounts_map(ledger_fn)
    if not accounts_map:
        parser.error("The ledger file does not contain account mappings.")

    for arg in ofx_files:
        print '\n'*3
        print ';;;;; Import of %s' % arg

        for acc in process_ofx(arg, accounts_map):
            print '\n'*3
            print '; Import account: %s ' % acc.accname
            print '; Start import: %s ' % acc.start
            print
            for t in acc.transactions:
                print str(t)
                print '  %-60s %10.2f %s' % (acc.accname, t.amount, acc.currency)
                print

            print '; End import: %s ' % acc.end
            print '@assert %s %s     %s %s' % (
                acc.bal_time.date(), acc.accname, acc.bal_amount, acc.currency)
            print

    print '\n'


if __name__ == '__main__':
    main()

