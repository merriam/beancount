#!/usr/bin/env python
"""
Scavenge the GnuCash file for account definition and replicate the tree of
accounts in an SQL database.
"""

# stdlib imports
import logging

# misc imports
import psycopg2 as dbapi
from BeautifulSoup import BeautifulStoneSoup

# antiorm imports
from dbapiext import execute_f



class Account(object):
    "A simple container for a GnuCash account object."

    gc_id = None
    gc_parent_id = None

    id = None
    parent = None

    name = None
    description = None
    security = None

    def __init__(self):
        self.children = []

    def __str__(self):
        return '<Account %s (%s) %s [%s] %s>' % (
            self.gc_id, self.gc_parent_id, self.name, self.security, self.description)

def main():
    import optparse
    parser = optparse.OptionParser(__doc__.strip())
    opts, args = parser.parse_args()

    conn = dbapi.connect(database='beancount.db',
                         host='localhost',
                         user='blais')



    if len(args) != 1:
        parser.error("Specify the gnucash XML file.")
    gcfn = args[0]

    accounts = {}

    soup = BeautifulStoneSoup(open(gcfn))
    for a in soup.findAll('gnc:account'):
        ## print
        ## print '----------------------------------------'
        ## print a.prettify()

        acc = Account()

        acc.gc_id = a.find('act:id').string

        acc.name = a.find('act:name').string
        description = a.find('act:description')
        if description:
            acc.description = description.string

        _com = a.find('act:commodity')
        if _com:
            acc.security = _com.find('cmdty:id').string

        parent = a.find('act:parent')
        acc.gc_parent_id = parent.string if parent else None

        accounts[acc.gc_id] = acc

    # Resolve all the parents.
    roots = []
    for acc in accounts.itervalues():
        acc.parent = accounts.get(acc.gc_parent_id, None)
        acc.gc_id = acc.gc_parent_id = None
        if acc.parent is None:
            roots.append(acc)

    # Build children lists.
    for acc in accounts.itervalues():
        if acc.parent:
            acc.parent.children.append(acc)

    # Print out all the tree.
    for acc in roots:
        print_acc(acc, 0)

    # Create all the accounts in the database.
    for root in roots:
        create_sql_accounts(conn, root)

    conn.close()


def print_acc(acc, level):
    "Recursively print an account hierarchy."
    pfx = '    '*level
    print pfx + '%s (%s)    [%s]' % (acc.name, acc.description, acc.security)
    for child in acc.children:
        print_acc(child, level+1)

def flatten(node, l=[]):
    l.append(node)
    for child in node.children:
        flatten(child, l)
    return l

def create_sql_accounts(conn, root):
    "Create all the accounts in the SQL database."

    curs = conn.cursor()

    for acc in flatten(root):
        if acc.security is None:
            logging.warning("Warning: %s has no security. Using default." % acc)
            
        execute_f(curs, """
           insert into account (%s) values (%S);
        """, ('name', 'sec', 'parent_id'),
                  (str(acc.name),
                   str(acc.security) if acc.security else 'CAD',
                   acc.parent.id if acc.parent else None)
                  )

        # Get the id of the newly inserted node.
        execute_f(curs, "select currval('account_id_seq')")
        iid = curs.next()[0]
        acc.id = iid

    conn.commit()



if __name__ == '__main__':
    main()




## <gnc:account version="2.0.0">
##   <act:name>HSBC Checking Account</act:name>
##   <act:id type="guid">16f8dd0818d1eaadf21202e39eedbfda</act:id>
##   <act:type>BANK</act:type>
##   <act:commodity>
##     <cmdty:space>ISO4217</cmdty:space>
##     <cmdty:id>USD</cmdty:id>
##   </act:commodity>
##   <act:commodity-scu>100</act:commodity-scu>
##   <act:slots>
##     <slot>
##       <slot:key>online_id</slot:key>
##       <slot:value type="string">022000020  167739123</slot:value>
##     </slot>
##   </act:slots>
##   <act:parent type="guid">d25815c9528c26435b4a604a58f8b558</act:parent>
## </gnc:account>
