=====================
   beancount: TODO
=====================

.. contents::
..
    1  Beancount (Accounting)
    2  Ideas
      2.1  Links
    3  Reporting



Beancount (Accounting)
======================

main focus:

  * check capital gains, write tests
  * write tests for date inequalities
  * add page filtering


- You need to write a test with dates that are close by between
  @checks and with @pad in between.

- FIXME: redistribute the expenses at regular intervals in blais.ledger


parser:

- Bug: A transaction without postings should barf.

- Review the dates inequalities, incl + excl, like compsci

  * Clarify this for @check as well, it should probably be at the end
    of the day.

- make De and Cr just D and C

- Allow commas in amounts. I like commas sometimes.

- Validate commodities using the defaccount declaration.

- Add a @defcomm directive, that checks validity for the commodities
  that are seen.

- IMPORTANT: Using the pickle, the errors only get reported when you
  parse initially. We must make the balance checks in a separate
  stage!!! Fix that, save the errors in the Ledger object and report
  them every time.

- Figure out why we get 1.0 USD when we import OFX, we should get 1.00 USD

- Accounts unused for the filtered postings could simply be removed.



capital gains:

- Capital gains should not count commissions nor on the buy nor on the
  sell side. How do we book them like this?  Create a small example.

- Make my Capital-Gains use the most appropriate syntax and make sure
  that the commissions aren't counted in (add a test).

    You need to do a test for capital gains.

views:

- To create custom views, for example, weekly summaries, you could
  convert the ledger into another ledger, where entries would have
  been replaced by summary entries instead, and all the other
  functionalities would still work.

- Fun little project: Create a graphviz output from a Ledger, where
  transactions above a certain amount would generate a link between
  accounts. Note:  the threshold could be either for single
  transactions, or for aggregate amounts (absolute value).


checks:

- Detect and find potential duplicates.



import:

- Modify all import scripts so that they avoid reimporting already
  imported stuff. All the import scripts should take an existing
  Ledger file as input.

- The OFX importer needs to unescape &amp; and others.

- Write a generic import routine that will try to heuristically match
  partially completed transactions from an existing Ledger.


filtering:

- We need an option to automatically add opening balances entries when
  filtering by time.



scripts:

- Write a script to laod the data into an SQL database.

- Implement a web server and all pages being served from memory.

- Figure out how to show balance to market value.

- Make this available publicly (segregate the flair code more
  clearly).

- Figure out how to do stock splits properly.

- Output reports using the debits and credits format.

- Check time ranges should also output the ranges of transactions
  present in the file.

- Check balances for transactions that are in [].

- Add a command to print the parsed transactions register in the order
  they were read in.

- Add declarations for important dates:

  * @date 2007-01-01  'Q1 07'
  * The date parsing should automatically recognize these

- Add directives specific to conversion scripts as well::

     @defvar ofx accid 000016726282       Assets:Current:RBC:Checking

     @defvar paypal acc_sales    Income:Book-Sales
     @defvar paypal acc_deposit  Assets:Current:PayPal
     @defvar paypal acc_fee      Expenses:Financial:Commissions:PayPal




tests:

- Test Wallet += None

- Write functional tests
- Write automated tests for everything.





doc/examples/demos:

- Make a presentation

- Write simple documentation, maybe tests should be part of the
  documentation?

- Create an 'examples' subdirectory, with typical use cases.

- Examples:

  - mortgage, buying a home
  - capital gains (with commissions correctly)
  - cie expenses, the way I'm doing it.
  - misc, e.g. credit card

- Include examples

- This is causing me a problem::

    2008-02-14 * FUNDS TRANSFER
      Assets:Current:RBC:Checking-US                                -89050.66 USD @ 0.9901 CAD
      Assets:Current:RBC:Savings                                     88169.06 CAD

  The costs are:

    2008-02-14 * FUNDS TRANSFER
      Assets:Current:RBC:Checking-US                                -88169.06 CAD
      Assets:Current:RBC:Savings                                     88169.06 CAD

  So when I show the balance sheet "at cost", it shows the account
  Assets:Current:RBC:Checking-US as having had some CAD debited from
  it.




serve:

- Modify htmlout to cache the result of rendering nodes, and reuse
  that code; or optimize htmlout (it's very slow now, it creates an
  intermediate tree). htmlout really should be a fast and simple C
  extension module.

- Make it possible to upload a new file to the server to be parsed.
  This way, I wouldn't even have to log in ssh in order to update the
  in-memory database...

- BUG: There is a bug with collapsing the tree nodes in the ranges
  page.



reporting:

- Implement `--code-as-payee' combined with `--by-payee', this
  provides an interesting view.

  Implement a view ...

  * By code
  * By payee




Ideas
=====

- Create a script to support generating lists of file locations for
  navigating the input file in a certain order.

    Let's say that I would want to inspect the input for some
    arbitraty list of filtered transactions that relate to
    postings: all I have to do is write a script that outputs
    "errors" in a way that Emacs knows to parse, and then
    'next-error and 'previous-error takes my cursor there with
    a single keystroke!

- Not sure if we need this with the @imported directive, but how about
  a special field in the transaction's posting::

    Assets:Investments:HSBC-Broker           -100 IVV @@ 136.2901 USD  {HD7egE62}
    Income:Investment:Capital-Gains

  This special kind of id would get computed in a uniform way from the
  date and the account being imported, so that we could check if this
  posting or transaction had already been imported before.

- Add directives to support import:

  @imported <FROMDATE> <TODATE> <ACCOUNT>

  Using the intersection of these date intervals and the account name,
  you can determine what has already been imported and avoid importing
  twice.

  * We need central support for these tasks as well.
  * The conversion scripts should always parse a ledger file.

- You should be able to click on dates and see all postings by date
  too.

- You should be able to click on a payee to view its transactions.




Links
-----

Description of a data model very similar to my idea.
http://homepages.tcp.co.uk/~m-wigley/gc_wp_ded.html





Reporting
=========

- trial balance (view all accounts)

  - total
  - at intervals: per-week, per-month, etc.

- register view

  - total
  - at intervals (?)

- balance sheet  (A = L+E)

  - total
  - at intervals: per-week, per-month, etc.

- pnl view  (R-I)

  - total
  - at intervals

- errors / check

- ranges of checks
- ranges of transactions

- info page

- list of uncleared transactions

- custom reports:

* current cie expenses list and amount that needs be paid.
* stuff that I lent and that I'm waiting for.
* currency exposure.
* list how much liquid assets are available






Hi John

I'm almost done reconciling all my finances back to july 2006. I've
been working on and off over the past couple of weeks due to other
projects taking over. Right now, I'm trying to finish up this
reconciliation by adding data from my investing accounts.

I'm trying to solve capital gains problem... there are some issues:
the commissions must not be counted as part of the cost nor the profit
(basically, the cost should include the commission, and the proceeds
should have the commission subtracted). What I'm trying to do is to
find a way to 1) accomodate the account that I used for the broker
account to reflect the actual statment of activity (so I can compare
them), and 2) to automatically compute the gains. Ideally, the
cost-per-share would be automatically computed using the average value
(this would be easy if the system can track the total amount spent for
each commodity).


Automatic assignment of non-balanced virtual transactions
---------------------------------------------------------

I haven't yet found the right way to do this, but while trying to
figure the right set of transactions, I had an idea: wouldn't it be
great if a non-balanced virtual transaction would automatically be set
to the balance of the balanced transactions? e.g.::

  2008-02-01 * Buy some Bananas.
    Assets:Investments:Broker               30 Banana @ 12.00 CAD
    Assets:Investments:Broker               
    Expenses:Financial:Commissions               7.95 CAD
    (Cost:Banana)                           

In this example, both posting (2) and (4) would be assigned the value
"-367.95 CAD". Normally, such transactions that have no amount are not
allowed by the syntax. I'm quite certain that this added syntactic
sugar could find uses. If there are no empty balanced postings, a
virtual non-balanced posting should still not be allowed.


Channeling Separates Costs to Normal and Virtual
------------------------------------------------

Another idea, that came about, is after I realized that in the syntax
that includes the cost, the price is almost useless::

    Assets:Investments:Broker             -20 Banana {12.00 CAD} @ 14.00 CAD

14.00 CAD is not used, other than for setting a historical price point
in the price database, a feature which has dubious use, since in most
cases the user is interested in the "current" market value, and also,
if the user is interested in the historical market value, the price
points provided by the rare sale events are not very valueable (you'd
have some other way to get the historical prices anyway).

So I propose to extend this syntax a little bit: by specifying two
share prices (or two costs, with {{}} or @@), you would be injecting a
value for the posting into two sets of balances: the non-virtual, and
the balanced virtual. For example::

  2008-02-01 * Sell some Bananas.
    Assets:Investments:Broker             -20 Banana {12.00 CAD} @ 14.00 CAD
    Assets:Investments:Broker             280.00 CAD   <-- optional
    [Income:Investments:Capital-Gains]    240.00 CAD   <-- optional
    
I'm not entirely sure that this is the way to go, but I feel that this
is going somewhere. 

Another technique I've tried in order to track book value is to create
subaccounts for each of the commodities traded. The problem with that
is that when you have many commodities, it *stinks* (long account
names), and also, the @check directive currently doesn't allow me to
check the balance of an account including its subaccounts (maybe I
should change that, but I haven't felt a need for it... the simple
version works well enough otherwise, for the kinds of use of @check
that I've made until this experiment).


Specialized Syntax?
-------------------

Maybe this capital gains tracking issue requires a special syntax (I
know you hate that, but coming up with something that'll work may give
some insight into how to solve this with the most simple marking that
would do the most generic thing, that would support solving the
problem elegantly while being as general as possible).

What I need, is for the computer to track the total sum of each
commodity within a single account (something like what is done
explicitly in capgains1.ledger). I'm fine with always assuming that
the book value of a commodity is the average for all the active
positions. What I miss is the ability to automatically feed the
average cost-per-share from this account into a posting.

[I'll stop here for tonight, I'm too tired to continue.]

        

(In attachment you'll find some of the experiment ledgers I've been
fiddling. They illustrate the problem to solve with some examples.)
